name: build

on:
  push:
    branches: [ master ]
    tags:
      - v*
      - p*
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  test:
    name: test ${{ matrix.python }} ${{ matrix.os }} ${{ matrix.plat }} ${{ matrix.parallel }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python: [ 3.9 ]
        manylinux: [ 2010 ]
        plat: [ x86_64 ]
        parallel: [ mpi, serial, serial-pytest ]
        exclude:
          - os: macos-latest
            parallel: mpi
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: install requirements
        env:
          MKLROOT: ~/.local
        run: |
          export PYT=$(which python)
          python -m pip install pip build twine --upgrade
          python -m pip install mkl==2019 mkl-include intel-openmp numpy 'cmake>=3.19' pybind11

      - name: install requirements (linux / mpi)
        if: matrix.parallel == 'mpi' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libopenmpi-dev
          python -m pip install mpi4py

      - name: build gtest (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libgtest-dev
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo cp lib/*.a /usr/lib

      - name: build gtest (macos)
        if: matrix.os == 'macos-latest'
        run: |
          git clone -b release-1.8.0 https://github.com/google/googletest
          cd googletest
          cmake CMakeLists.txt
          make
          make install
          brew update
          brew install libomp

      - name: build test (serial-pytest, linux)
        if: matrix.parallel == 'serial-pytest'
        env:
          MKLROOT: ~/.local
        run: |
          mkdir build
          cd build
          cmake --version
          cmake .. -DUSE_MKL=ON -DBUILD_LIB=ON -DLARGE_BOND=ON -DUSE_COMPLEX=ON -DUSE_SG=ON
          make -j 2

      - name: build test (serial, linux)
        if: matrix.parallel == 'serial' && matrix.os == 'ubuntu-latest'
        env:
          MKLROOT: ~/.local
        run: |
          mkdir build_test
          cd build_test
          cmake --version
          cmake .. -DUSE_MKL=ON -DBUILD_TEST=ON -DLARGE_BOND=ON -DUSE_COMPLEX=ON -DUSE_SINGLE_PREC=ON -DUSE_SG=ON
          make -j 2

      - name: build test (serial, macos)
        if: matrix.parallel == 'serial' && matrix.os == 'macos-latest'
        env:
          MKLROOT: ~/.local
          MACOSX_DEPLOYMENT_TARGET: '10.9'
        run: |
          mkdir build_test
          cd build_test
          cmake --version
          cmake .. -DUSE_MKL=ON -DBUILD_TEST=ON -DLARGE_BOND=ON -DUSE_COMPLEX=ON -DUSE_SINGLE_PREC=ON -DUSE_SG=ON
          make -j 2

      - name: run test (serial)
        if: matrix.parallel == 'serial'
        run: |
          cd build_test
          ./block2_tests

      - name: run test (serial-pytest, linux)
        if: matrix.parallel == 'serial-pytest' && matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install pytest 'pyscf==2.1.0'
          export PYTHONPATH=$(pwd)/build:$(pwd):${PYTHONPATH}
          py.test pyblock2/unit_test/*.py

      - name: run test (serial-pytest, macos)
        if: matrix.parallel == 'serial-pytest' && matrix.os == 'macos-latest'
        run: |
          python -m pip install pytest 'pyscf==2.0.1'
          export PYTHONPATH=$(pwd)/build:$(pwd):${PYTHONPATH}
          py.test pyblock2/unit_test/*.py

      - name: build test (mpi)
        if: matrix.parallel == 'mpi'
        env:
          MKLROOT: ~/.local
        run: |
          sed -i "s|unit_test/test_|unit_test/mpi/test_|" CMakeLists.txt
          mkdir build_test
          cd build_test
          cmake .. -DUSE_MKL=ON -DBUILD_TEST=ON -DLARGE_BOND=ON -DMPI=ON -DUSE_COMPLEX=ON -DUSE_SINGLE_PREC=ON -DUSE_SG=ON
          make -j 2

      - name: run test (mpi)
        if: matrix.parallel == 'mpi'
        run: |
          cd build_test
          mpirun -n 2 ./block2_tests

  build:
    name: build ${{ matrix.python }} ${{ matrix.os }} ${{ matrix.plat }} ${{ matrix.parallel }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, macos-12 ]
        python: [ '3.6', '3.7', '3.8', '3.9' ]
        manylinux: [ 2010 ]
        plat: [ x86_64, arm64 ]
        parallel: [ mpi, serial ]
        exclude:
          - os: macos-latest
            parallel: mpi
          - os: macos-12
            parallel: mpi
          - os: macos-latest
            python: '3.6'
          - os: macos-12
            python: '3.6'
          - os: ubuntu-latest
            plat: arm64
          - os: macos-latest
            plat: arm64
          - os: macos-12
            plat: x86_64
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: install requirements
        env:
          MKLROOT: ~/.local
        run: |
          export PYT=$(which python)
          python -m pip install pip build twine --upgrade
          python -m pip install mkl==2019 mkl-include intel-openmp numpy 'cmake>=3.19' pybind11

      - name: build wheels (macos-x86_64)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest' && matrix.plat == 'x86_64'
        env:
          TAG_STRING: ${{ github.event.ref }}
          MACOSX_DEPLOYMENT_TARGET: '10.9'
        run: |
          brew update
          brew install libomp
          brew install gnu-sed
          export PATH=/usr/local/opt/gnu-sed/bin:$PATH
          echo ${TAG_STRING:11}
          gsed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          # gsed -i "/DUSE_MKL/a \                '-DOMP_LIB=OMP'," setup.py
          # gsed -i "/intel-openmp/d" setup.py
          # export OMPROOT=$(brew --prefix libomp)
          # echo ${OMPROOT}
          cmake --version
          python -m pip install wheel
          python -m pip wheel . -w ./dist --no-deps

      - name: build wheels (macos-arm64)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest' && matrix.plat == 'arm64'
        env:
          TAG_STRING: ${{ github.event.ref }}
          MACOSX_DEPLOYMENT_TARGET: '11.0'
        run: |
          brew update
          brew install libomp
          brew install gnu-sed
          export PATH=/usr/local/opt/gnu-sed/bin:$PATH
          echo ${TAG_STRING:11}
          gsed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          gsed -i "/DUSE_MKL/a \                '-DOMP_LIB=OMP'," setup.py
          gsed -i "/DUSE_MKL/a \                '-DARCH_ARM64=ON'," setup.py
          gsed -i "/mkl/d" setup.py
          gsed -i "/intel-openmp/d" setup.py
          gsed -i "/DUSE_MKL/c \                '-DUSE_MKL=OFF'," setup.py
          git clone https://github.com/Homebrew/brew arm-brew
          cd arm-brew && git checkout 3.5.10 && cd ..
          OMPGZ=$(./arm-brew/bin/brew fetch --force --bottle-tag=arm64_big_sur libomp | grep "Downloaded to" | awk '{print $3}')
          ./arm-brew/bin/brew install ${OMPGZ}
          export OMPROOT=$(./arm-brew/bin/brew --prefix libomp)
          echo ${OMPROOT}
          cmake --version
          python -m pip install wheel delocate
          export _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"
          export SDKROOT=/Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk
          export CROSS_COMPILE=1
          export PLAT="arm64"
          python -m pip wheel . -w ./dist --no-deps
          delocate-wheel --require-archs=arm64 -k dist/*.whl

      - name: prepare build wheels (manylinux)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        env:
          TAG_STRING: ${{ github.event.ref }}
        run: |
          echo ${TAG_STRING:11}
          sed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          cp ./.github/actions/build-wheel/Dockerfile.manylinux${{ matrix.manylinux }} ./.github/actions/build-wheel/Dockerfile

      - name: build wheels (manylinux)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/build-wheel
        with:
          python-version: ${{ matrix.python }}
          parallel: ${{ matrix.parallel }}

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*

      - name: upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ matrix.parallel }}
          path: dist
          retention-days: 2

  publish:
    name: publish
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: build source dist (serial)
        env:
          TAG_STRING: ${{ github.event.ref }}
        run: |
          echo ${TAG_STRING:11}
          sed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          python -m pip install pip build twine --upgrade
          python -m build --sdist

      - name: download wheels (serial)
        uses: actions/download-artifact@v2
        with:
          name: dist-serial
          path: dist

      - name: publish to pypi (serial)
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: build source dist (mpi)
        env:
          TAG_STRING: ${{ github.event.ref }}
        run: |
          rm -r dist
          echo ${TAG_STRING:11}
          sed -i "/DUSE_MKL/a \                '-DMPI=ON'," setup.py
          sed -i "s/name='block2'/name='block2-mpi'/g" setup.py
          sed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          python -m build --sdist

      - name: download wheels (mpi)
        uses: actions/download-artifact@v2
        with:
          name: dist-mpi
          path: dist

      - name: publish to pypi (mpi)
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_MPI_TOKEN }}
