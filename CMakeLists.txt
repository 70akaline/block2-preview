CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

FIND_PROGRAM(CMAKE_C_COMPILER NAMES $ENV{CC} gcc PATHS ENV PATH NO_DEFAULT_PATH)
FIND_PROGRAM(CMAKE_CXX_COMPILER NAMES $ENV{CXX} g++ PATHS ENV PATH NO_DEFAULT_PATH)

# Project Name (must be python module name)

SET(PROJECT_NAME block2)
PROJECT(${PROJECT_NAME} VERSION 2.0)

# Check Python3 and Pybind11

SET(Python_ADDITIONAL_VERSIONS 3)
FIND_PACKAGE(PythonInterp)

IF (NOT PYTHONINTERP_FOUND)
    MESSAGE(FATAL_ERROR "Python3 not found.")
ENDIF()

FIND_PACKAGE(PythonLibs ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})

IF (NOT PYTHONLIBS_FOUND)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; \
        import os; print(os.path.join(distutils.sysconfig.get_config_var('LIBDIR'), \
        distutils.sysconfig.get_config_var('LDLIBRARY')))"
        OUTPUT_VARIABLE PYTHON_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_inc; \
        print(get_python_inc())"
        OUTPUT_VARIABLE PYTHON_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()

EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import importlib.machinery;print(importlib.machinery.EXTENSION_SUFFIXES[0])"
    OUTPUT_VARIABLE PYLIB_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import pybind11;print(pybind11.get_include())"
    OUTPUT_VARIABLE PYBIND_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)

MESSAGE(STATUS "PROJECT_NAME = ${PROJECT_NAME}")
MESSAGE(STATUS "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}")
MESSAGE(STATUS "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}")
MESSAGE(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
MESSAGE(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
MESSAGE(STATUS "PYTHON_EXECUTABLE_HINT = ${PYTHON_EXECUTABLE_HINT}")
MESSAGE(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
MESSAGE(STATUS "PYLIB_SUFFIX = ${PYLIB_SUFFIX}")
MESSAGE(STATUS "PYBIND_INCLUDE_DIRS = ${PYBIND_INCLUDE_DIRS}")

IF (${PYTHON_EXECUTABLE_HINT})
    IF (NOT (${PYTHON_EXECUTABLE_HINT} EQUAL ${PYTHON_EXECUTABLE}))
        MESSAGE(FATAL_ERROR "Python3 used by cmake (${PYTHON_EXECUTABLE}) does not match Python3 \
            used by setup.py (${PYTHON_EXECUTABLE_HINT})!")
    ENDIF()
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED True)

IF("${EXP_TMPL}" STREQUAL "NONE")
    SET(SRCS "")
    SET(PYBIND_SRCS "")
    SET(TMPL_FLAG "")
ELSE()
    FILE(GLOB_RECURSE SRCS src/instantiation/*.cpp)
    FILE(GLOB_RECURSE PYBIND_SRCS src/pybind/*.cpp)
    SET(TMPL_FLAG "-D_EXPLICIT_TEMPLATE")
ENDIF()

IF (${LARGE_BOND})
    SET(BOND_FLAG "-D_LARGE_BOND")
ELSEIF (${SMALL_BOND})
    SET(BOND_FLAG "-D_SMALL_BOND")
ENDIF()

IF (${USE_SCI})
    SET(SCI_FLAG "-D_USE_SCI")
    IF (${SCI_WRAPPER2})
        SET(SCI_FLAG ${SCI_FLAG} -D_SCI_WRAPPER2)
        FIND_PATH(SCI_INCLUDE_DIR NAMES pybind_sci.hpp HINTS $ENV{SCI})
        MESSAGE(STATUS "SCI_INCLUDE_DIR = ${SCI_INCLUDE_DIR}")
    ENDIF()
ELSE()
    SET(SCI_INCLUDE_DIR "")
    SET(SCI_FLAG "")
ENDIF()

MESSAGE(STATUS "BUILD_LIB = ${BUILD_LIB}")

IF (NOT(APPLE))
    SET(NO_AS_NEEDED -Wl,--no-as-needed)
ENDIF()

IF("${OMP_LIB}" STREQUAL "SEQ")
    SET(MKL_OMP_LIB_NAME mkl_sequential)
    SET(OMP_LIB_NAME "")
    SET(PTHREAD "")
ELSEIF ("${OMP_LIB}" STREQUAL "GNU")
    FIND_LIBRARY(OMP_LIB_NAME NAMES gomp PATHS /usr/local/lib)
    SET(MKL_OMP_LIB_NAME mkl_gnu_thread)
    SET(PTHREAD pthread)
ELSE()
    FIND_LIBRARY(OMP_LIB_NAME NAMES iomp5 PATHS /usr/local/lib)
    SET(MKL_OMP_LIB_NAME mkl_intel_thread)
    SET(PTHREAD pthread)
ENDIF()

IF("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    SET(OPT_FLAG -O0 -g -fstack-check -fno-omit-frame-pointer -fno-optimize-sibling-calls -Werror -Werror=return-type)
ELSE()
    SET(OPT_FLAG -O3 -funroll-loops -openmp -Werror -Werror=return-type)
ENDIF()


IF (${USE_MKL})
    FIND_PATH(MKL_INCLUDE_DIR NAMES mkl.h HINTS $ENV{MKLROOT}/include /usr/local/include)
    FIND_LIBRARY(MKL_LIB_LP NAMES mkl_intel_lp64
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_CORE NAMES mkl_core
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_GT NAMES ${MKL_OMP_LIB_NAME}
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_AVX NAMES mkl_avx2
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_AVX512 NAMES mkl_avx512
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib NO_DEFAULT_PATH)
    SET(MKL_LIBS ${NO_AS_NEEDED} ${PTHREADS} ${OMP_LIB_NAME} ${MKL_LIB_LP} ${MKL_LIB_CORE} ${MKL_LIB_GT} ${MKL_LIB_AVX} ${MKL_LIB_AVX512})
    MESSAGE(STATUS "MKL_INCLUDE_DIR = ${MKL_INCLUDE_DIR}")
    MESSAGE(STATUS "MKL_LIBS = ${MKL_LIBS}")
    SET(MKL_FLAG "-D_HAS_INTEL_MKL")
ELSE()
    # Check LAPACK and BLAS
    FIND_PACKAGE(BLAS REQUIRED)
    FIND_PACKAGE(LAPACK REQUIRED)

    SET(MKL_INCLUDE_DIR "")
    SET(MKL_LIBS "")
    SET(MKL_FLAG "")
ENDIF()

IF (${BUILD_LIB})
    ADD_LIBRARY(${PROJECT_NAME} MODULE ${PYBIND_SRCS} ${SRCS} src/pybind.cpp)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SUFFIX "${PYLIB_SUFFIX}" PREFIX "")
    IF (APPLE)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC -Wl,-undefined,dynamic_lookup)
    ENDIF()
    SET(OPT_FLAG ${OPT_FLAG} -fvisibility=hidden)
ELSE()
    ADD_EXECUTABLE(${PROJECT_NAME} src/main.cpp ${SRCS})
ENDIF()

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC src ${MKL_INCLUDE_DIR} ${SCI_INCLUDE_DIR})

IF (NOT APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC rt)
ENDIF()

IF (${MPI})
    FIND_PACKAGE(MPI)

    IF (NOT MPI_FOUND)
        MESSAGE(FATAL_ERROR "MPI not found. Make sute CMAKE_CXX_COMPILER, MPI_CXX_COMPILER and MPI_C_COMPILER are set.")
        # This vv does not work
        #FIND_PATH(MPI_INCLUDE_PATH NAMES mpi.h HINTS $ENV{MPI_HOME}/include $ENV{MPIHOME}/include)
        #FIND_LIBRARY(MPI_LIB_MPICXX NAMES mpi_cxx PATHS $ENV{MPI_HOME}/lib $ENV{MPIHOME}/lib NO_DEFAULT_PATH)
        #FIND_LIBRARY(MPI_LIB_MPI NAMES mpi PATHS $ENV{MPI_HOME}/lib $ENV{MPIHOME}/lib NO_DEFAULT_PATH)
        #GET_FILENAME_COMPONENT(MPI_BASE_DIR "${MPI_LIB_MPI}" PATH)
        #SET(MPI_CXX_LIBRARIES ${MPI_LIB_MPICXX} ${MPI_LIB_MPI})
        #SET(MPI_LINK_FLAGS "-Wl,-rpath-link,${MPI_BASE_DIR} -Wl,-rpath-link,/usr/lib64")
    ENDIF()

    MESSAGE(STATUS "MPI_COMPILE_FLAGS = ${MPI_COMPILE_FLAGS}")
    MESSAGE(STATUS "MPI_LINK_FLAGS = ${MPI_LINK_FLAGS}")
    MESSAGE(STATUS "MPI_INCLUDE_PATH = ${MPI_INCLUDE_PATH}")
    MESSAGE(STATUS "MPI_CXX_LIBRARIES = ${MPI_CXX_LIBRARIES}")
    SET(MPI_INCLUDE_DIR ${MPI_INCLUDE_PATH})
    SET(MPI_LIBS ${MPI_CXX_LIBRARIES})
    SET(MPI_FLAG "-D_HAS_MPI" ${MPI_COMPILE_FLAGS})
ELSE()
    SET(MPI_LINK_FLAGS "")
    SET(MPI_COMPILE_FLAGS "")
    SET(MPI_INCLUDE_DIR "")
    SET(MPI_LIBS "")
    SET(MPI_FLAG "")
ENDIF()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${OMP_LIB_NAME} ${PTHREAD})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${PTHREAD} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${MKL_LIBS} ${MPI_LIBS})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")

MESSAGE(STATUS "SRCS = ${SRCS}")
MESSAGE(STATUS "OPT_FLAG = ${OPT_FLAG}")
MESSAGE(STATUS "BOND_FLAG = ${BOND_FLAG}")
MESSAGE(STATUS "OMP_LIB = ${OMP_LIB_NAME}")

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${PYTHON_INCLUDE_DIRS} ${PYBIND_INCLUDE_DIRS} ${MKL_INCLUDE_DIR} ${MPI_INCLUDE_DIR})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} BEFORE PUBLIC ${OPT_FLAG} ${MKL_FLAG} ${MPI_FLAG} ${TMPL_FLAG} ${BOND_FLAG} ${SCI_FLAG})

IF (${BUILD_TEST})
    ENABLE_TESTING()
    FIND_PACKAGE(GTest REQUIRED)
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

    FILE(GLOB TSRCS unit_test/test_*.cpp)
    MESSAGE(STATUS "TSRCS = ${TSRCS}")

    ADD_EXECUTABLE(${PROJECT_NAME}_tests ${TSRCS} ${SRCS})
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_tests PUBLIC src ${MKL_INCLUDE_DIR} ${MPI_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests ${GTEST_BOTH_LIBRARIES} ${PTHREAD} ${MPI_LIBS})
    TARGET_COMPILE_OPTIONS(${PROJECT_NAME}_tests BEFORE PUBLIC ${OPT_FLAG} ${MKL_FLAG} ${MPI_FLAG} ${TMPL_FLAG} ${BOND_FLAG} ${SCI_FLAG})
    SET_TARGET_PROPERTIES(${PROJECT_NAME}_tests PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")

    IF (NOT APPLE)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests rt)
    ENDIF()
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests ${OMP_LIB_NAME} ${PTHREAD} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${MKL_LIBS})

    ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}_tests POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_SOURCE_DIR}/data ${CMAKE_CURRENT_BINARY_DIR}/data)

    ADD_TEST(NAME Test COMMAND ${PROJECT_NAME}_tests)
ENDIF()
