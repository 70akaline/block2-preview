CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

FIND_PROGRAM(CMAKE_C_COMPILER NAMES $ENV{CC} gcc PATHS ENV PATH NO_DEFAULT_PATH)
FIND_PROGRAM(CMAKE_CXX_COMPILER NAMES $ENV{CXX} g++ PATHS ENV PATH NO_DEFAULT_PATH)

# Project Name (must be python module name)

SET(PROJECT_NAME block2)
PROJECT(${PROJECT_NAME} VERSION 2.0)

# Check Python3 and Pybind11

SET(Python_ADDITIONAL_VERSIONS 3)
FIND_PACKAGE(PythonInterp)

IF (NOT PYTHONINTERP_FOUND)
    MESSAGE(FATAL_ERROR "Python3 not found.")
ENDIF()

FIND_PACKAGE(PythonLibs ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})

IF (NOT PYTHONLIBS_FOUND)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; \
        import os; print(os.path.join(distutils.sysconfig.get_config_var('LIBDIR'), \
        distutils.sysconfig.get_config_var('LDLIBRARY')))"
        OUTPUT_VARIABLE PYTHON_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_inc; \
        print(get_python_inc())"
        OUTPUT_VARIABLE PYTHON_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()

EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import importlib.machinery;print(importlib.machinery.EXTENSION_SUFFIXES[0])"
    OUTPUT_VARIABLE PYLIB_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import pybind11;print(pybind11.get_include())"
    OUTPUT_VARIABLE PYBIND_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)

MESSAGE(STATUS "PROJECT_NAME = ${PROJECT_NAME}")
MESSAGE(STATUS "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}")
MESSAGE(STATUS "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}")
MESSAGE(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
MESSAGE(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
MESSAGE(STATUS "PYTHON_EXECUTABLE_HINT = ${PYTHON_EXECUTABLE_HINT}")
MESSAGE(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
MESSAGE(STATUS "PYLIB_SUFFIX = ${PYLIB_SUFFIX}")
MESSAGE(STATUS "PYBIND_INCLUDE_DIRS = ${PYBIND_INCLUDE_DIRS}")

IF (${PYTHON_EXECUTABLE_HINT})
    IF (NOT (${PYTHON_EXECUTABLE_HINT} EQUAL ${PYTHON_EXECUTABLE}))
        MESSAGE(FATAL_ERROR "Python3 used by cmake (${PYTHON_EXECUTABLE}) does not match Python3 \
            used by setup.py (${PYTHON_EXECUTABLE_HINT})!")
    ENDIF()
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED True)

FILE(GLOB_RECURSE SRCS src/quantum.cpp)

FILE(GLOB_RECURSE EXC_SRCS *-checkpoint.cpp)
FILE(GLOB_RECURSE RM_PYBIND_SRCS src/pybind/*.cpp)

IF (NOT("${EXC_SRCS}" STREQUAL ""))
    LIST(REMOVE_ITEM SRCS ${EXC_SRCS})
ENDIF()

MESSAGE(STATUS "BUILD_LIB = ${BUILD_LIB}")

IF (${USE_MKL})
    FIND_PATH(MKL_INCLUDE_DIR NAMES mkl.h HINTS $ENV{MKLROOT}/include)
    FIND_LIBRARY(MKL_LIB_LP NAMES mkl_intel_lp64
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_CORE NAMES mkl_core
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_GT NAMES mkl_intel_thread
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_AVX NAMES mkl_avx2
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 NO_DEFAULT_PATH)
    FIND_LIBRARY(MKL_LIB_AVX512 NAMES mkl_avx512
        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 NO_DEFAULT_PATH)
    SET(MKL_LIBS -Wl,--no-as-needed pthread iomp5 ${MKL_LIB_LP} ${MKL_LIB_CORE} ${MKL_LIB_GT} ${MKL_LIB_AVX} ${MKL_LIB_AVX512})
    MESSAGE(STATUS "MKL_INCLUDE_DIR = ${MKL_INCLUDE_DIR}")
    MESSAGE(STATUS "MKL_LIBS = ${MKL_LIBS}")
    SET(MKL_FLAG "-D_HAS_INTEL_MKL")
ELSE()
    # Check LAPACK and BLAS
    FIND_PACKAGE(BLAS REQUIRED)
    FIND_PACKAGE(LAPACK REQUIRED)

    SET(MKL_INCLUDE_DIR "")
    SET(MKL_LIBS "")
    SET(MKL_FLAG "")
ENDIF()

IF (${BUILD_LIB})
    FILE(GLOB_RECURSE PYBIND_SRCS src/pybind.cpp)
    SET(SRCS ${PYBIND_SRCS} ${SRCS})
    
    IF (NOT("${EXC_SRCS}" STREQUAL ""))
        LIST(REMOVE_ITEM SRCS ${EXC_SRCS})
    ENDIF()

    IF (${NO_PYBIND})
        MESSAGE(STATUS "NO_PYBIND")
        LIST(REMOVE_ITEM SRCS ${RM_PYBIND_SRCS})
        ADD_LIBRARY(${PROJECT_NAME} MODULE ${SRCS})
    ELSE()
        ADD_LIBRARY(${PROJECT_NAME} MODULE ${SRCS})
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SUFFIX "${PYLIB_SUFFIX}" PREFIX "")
    ENDIF()

    FIND_PACKAGE(Eigen3 REQUIRED)
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${EIGEN3_INCLUDE_DIR})
    MESSAGE(STATUS "EIGEN3_INCLUDE_DIR = ${EIGEN3_INCLUDE_DIR}")

    IF (APPLE)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC -Wl,-undefined,dynamic_lookup)
    ENDIF()

ELSE()
    IF (NOT("${RM_PYBIND_SRCS}" STREQUAL ""))
        LIST(REMOVE_ITEM SRCS ${RM_PYBIND_SRCS})
    ENDIF()
    SET(SRCS ${SRCS} src/main.cpp)
    ADD_EXECUTABLE(${PROJECT_NAME} ${SRCS})
ENDIF()

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC src
    src/array src/block src/csf src/dmrg src/io src/mps_nevpt src/newmat10 src/npdm src/numeric
    src/response src/symmetry src/four_index_ops src/three_index_ops src/two_index_ops src/genetic)

IF (NOT APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC rt)
ENDIF()
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC iomp5 pthread)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC pthread ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${MKL_LIBS})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC -DBLAS -DUSELAPACK -D_HAS_CBLAS ${MKL_FLAG})

IF (${MPI})
    FIND_PACKAGE(MPI REQUIRED)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${MPI_INCLUDE_PATH})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${MPI_CXX_LIBRARIES})
    MESSAGE(STATUS "MPI_COMPILE_FLAGS = ${MPI_COMPILE_FLAGS}")
    MESSAGE(STATUS "MPI_LINK_FLAGS = ${MPI_LINK_FLAGS}")
    MESSAGE(STATUS "MPI_INCLUDE_PATH = ${MPI_INCLUDE_PATH}")
    MESSAGE(STATUS "MPI_CXX_LIBRARIES = ${MPI_CXX_LIBRARIES}")
ELSE()
    TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC -DSERIAL)
ENDIF()

MESSAGE(STATUS "SRCS = ${SRCS}")

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${PYTHON_INCLUDE_DIRS} ${PYBIND_INCLUDE_DIRS})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} BEFORE PUBLIC -fopenmp -O3 -funroll-loops -Werror)

ENABLE_TESTING()
FIND_PACKAGE(GTest REQUIRED)
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

FILE(GLOB_RECURSE TSRCS unit_test/test_dmrg_sz.cpp src/quantum.cpp)

ADD_EXECUTABLE(${PROJECT_NAME}_tests ${TSRCS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_tests PUBLIC src)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests ${GTEST_BOTH_LIBRARIES} pthread)
TARGET_COMPILE_OPTIONS(${PROJECT_NAME}_tests BEFORE PUBLIC -g -rdynamic)

IF (NOT APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests rt)
ENDIF()
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_tests iomp5 pthread ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${MKL_LIBS})

ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}_tests POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/data ${CMAKE_CURRENT_BINARY_DIR}/data)

ADD_TEST(NAME Test COMMAND ${PROJECT_NAME}_tests)
